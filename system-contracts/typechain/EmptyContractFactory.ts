/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { EmptyContract } from "./EmptyContract";

export class EmptyContractFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<EmptyContract> {
    return super.deploy(overrides || {}) as Promise<EmptyContract>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): EmptyContract {
    return super.attach(address) as EmptyContract;
  }
  connect(signer: Signer): EmptyContractFactory {
    return super.connect(signer) as EmptyContractFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EmptyContract {
    return new Contract(address, _abi, signerOrProvider) as EmptyContract;
  }
}

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x0000000101200190000000040000c13d0000000001000019000000110001042e0000008001000039000000400010043f0000000001000416000000000101004b0000000e0000c13d0000002001000039000001000010044300000120000004430000000501000041000000110001042e000000000100001900000012000104300000001000000432000000110001042e000000120001043000000000000000000000000200000000000000000000000000000040000001000000000000000000d4d4fd74cdac8443eb1379ae2a5f6f4d8fc682feb3846e753806420cacba1f40";
