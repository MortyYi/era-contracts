/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SystemContextInterface extends ethers.utils.Interface {
  functions: {
    "appendTransactionToCurrentL2Block(bytes32)": FunctionFragment;
    "baseFee()": FunctionFragment;
    "blockGasLimit()": FunctionFragment;
    "blockHash(uint256)": FunctionFragment;
    "chainId()": FunctionFragment;
    "coinbase()": FunctionFragment;
    "currentBlockInfo()": FunctionFragment;
    "difficulty()": FunctionFragment;
    "gasPrice()": FunctionFragment;
    "getBatchHash(uint256)": FunctionFragment;
    "getBatchNumberAndTimestamp()": FunctionFragment;
    "getBlockHashEVM(uint256)": FunctionFragment;
    "getBlockNumber()": FunctionFragment;
    "getBlockNumberAndTimestamp()": FunctionFragment;
    "getBlockTimestamp()": FunctionFragment;
    "getL2BlockNumberAndTimestamp()": FunctionFragment;
    "incrementTxNumberInBatch()": FunctionFragment;
    "origin()": FunctionFragment;
    "publishTimestampDataToL1()": FunctionFragment;
    "resetTxNumberInBatch()": FunctionFragment;
    "setGasPrice(uint256)": FunctionFragment;
    "setL2Block(uint128,uint128,bytes32,bool,uint128)": FunctionFragment;
    "setNewBatch(bytes32,uint128,uint128,uint256)": FunctionFragment;
    "setTxOrigin(address)": FunctionFragment;
    "txNumberInBlock()": FunctionFragment;
    "unsafeOverrideBatch(uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "appendTransactionToCurrentL2Block",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "baseFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "blockGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blockHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(functionFragment: "coinbase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentBlockInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "difficulty",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gasPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBatchHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchNumberAndTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockHashEVM",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumberAndTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2BlockNumberAndTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incrementTxNumberInBatch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "origin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publishTimestampDataToL1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetTxNumberInBatch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGasPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setL2Block",
    values: [BigNumberish, BigNumberish, BytesLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewBatch",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTxOrigin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "txNumberInBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unsafeOverrideBatch",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "appendTransactionToCurrentL2Block",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blockGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blockHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "coinbase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentBlockInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "difficulty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gasPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBatchHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchNumberAndTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockHashEVM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumberAndTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2BlockNumberAndTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementTxNumberInBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "origin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishTimestampDataToL1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetTxNumberInBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setL2Block", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNewBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTxOrigin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "txNumberInBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsafeOverrideBatch",
    data: BytesLike
  ): Result;

  events: {};
}

export class SystemContext extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SystemContextInterface;

  functions: {
    appendTransactionToCurrentL2Block(
      _txHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "appendTransactionToCurrentL2Block(bytes32)"(
      _txHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    baseFee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "baseFee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    blockGasLimit(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "blockGasLimit()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    blockHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      hash: string;
      0: string;
    }>;

    "blockHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      hash: string;
      0: string;
    }>;

    chainId(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "chainId()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    coinbase(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "coinbase()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    currentBlockInfo(overrides?: CallOverrides): Promise<{
      blockInfo: BigNumber;
      0: BigNumber;
    }>;

    "currentBlockInfo()"(overrides?: CallOverrides): Promise<{
      blockInfo: BigNumber;
      0: BigNumber;
    }>;

    difficulty(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "difficulty()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    gasPrice(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "gasPrice()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getBatchHash(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      hash: string;
      0: string;
    }>;

    "getBatchHash(uint256)"(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      hash: string;
      0: string;
    }>;

    getBatchNumberAndTimestamp(overrides?: CallOverrides): Promise<{
      batchNumber: BigNumber;
      batchTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getBatchNumberAndTimestamp()"(overrides?: CallOverrides): Promise<{
      batchNumber: BigNumber;
      batchTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getBlockHashEVM(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      hash: string;
      0: string;
    }>;

    "getBlockHashEVM(uint256)"(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      hash: string;
      0: string;
    }>;

    getBlockNumber(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getBlockNumber()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getBlockNumberAndTimestamp(overrides?: CallOverrides): Promise<{
      blockNumber: BigNumber;
      blockTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getBlockNumberAndTimestamp()"(overrides?: CallOverrides): Promise<{
      blockNumber: BigNumber;
      blockTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getBlockTimestamp()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getL2BlockNumberAndTimestamp(overrides?: CallOverrides): Promise<{
      blockNumber: BigNumber;
      blockTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getL2BlockNumberAndTimestamp()"(overrides?: CallOverrides): Promise<{
      blockNumber: BigNumber;
      blockTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    incrementTxNumberInBatch(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "incrementTxNumberInBatch()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    origin(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "origin()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    publishTimestampDataToL1(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "publishTimestampDataToL1()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    resetTxNumberInBatch(overrides?: Overrides): Promise<ContractTransaction>;

    "resetTxNumberInBatch()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGasPrice(
      _gasPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGasPrice(uint256)"(
      _gasPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setL2Block(
      _l2BlockNumber: BigNumberish,
      _l2BlockTimestamp: BigNumberish,
      _expectedPrevL2BlockHash: BytesLike,
      _isFirstInBatch: boolean,
      _maxVirtualBlocksToCreate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setL2Block(uint128,uint128,bytes32,bool,uint128)"(
      _l2BlockNumber: BigNumberish,
      _l2BlockTimestamp: BigNumberish,
      _expectedPrevL2BlockHash: BytesLike,
      _isFirstInBatch: boolean,
      _maxVirtualBlocksToCreate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setNewBatch(
      _prevBatchHash: BytesLike,
      _newTimestamp: BigNumberish,
      _expectedNewNumber: BigNumberish,
      _baseFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setNewBatch(bytes32,uint128,uint128,uint256)"(
      _prevBatchHash: BytesLike,
      _newTimestamp: BigNumberish,
      _expectedNewNumber: BigNumberish,
      _baseFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTxOrigin(
      _newOrigin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTxOrigin(address)"(
      _newOrigin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    txNumberInBlock(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "txNumberInBlock()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    unsafeOverrideBatch(
      _newTimestamp: BigNumberish,
      _number: BigNumberish,
      _baseFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unsafeOverrideBatch(uint256,uint256,uint256)"(
      _newTimestamp: BigNumberish,
      _number: BigNumberish,
      _baseFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  appendTransactionToCurrentL2Block(
    _txHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "appendTransactionToCurrentL2Block(bytes32)"(
    _txHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  baseFee(overrides?: CallOverrides): Promise<BigNumber>;

  "baseFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  blockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "blockGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  blockHash(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "blockHash(uint256)"(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  chainId(overrides?: CallOverrides): Promise<BigNumber>;

  "chainId()"(overrides?: CallOverrides): Promise<BigNumber>;

  coinbase(overrides?: CallOverrides): Promise<string>;

  "coinbase()"(overrides?: CallOverrides): Promise<string>;

  currentBlockInfo(overrides?: CallOverrides): Promise<BigNumber>;

  "currentBlockInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

  difficulty(overrides?: CallOverrides): Promise<BigNumber>;

  "difficulty()"(overrides?: CallOverrides): Promise<BigNumber>;

  gasPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "gasPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  getBatchHash(
    _batchNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getBatchHash(uint256)"(
    _batchNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getBatchNumberAndTimestamp(overrides?: CallOverrides): Promise<{
    batchNumber: BigNumber;
    batchTimestamp: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "getBatchNumberAndTimestamp()"(overrides?: CallOverrides): Promise<{
    batchNumber: BigNumber;
    batchTimestamp: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  getBlockHashEVM(
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getBlockHashEVM(uint256)"(
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  "getBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

  getBlockNumberAndTimestamp(overrides?: CallOverrides): Promise<{
    blockNumber: BigNumber;
    blockTimestamp: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "getBlockNumberAndTimestamp()"(overrides?: CallOverrides): Promise<{
    blockNumber: BigNumber;
    blockTimestamp: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "getBlockTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  getL2BlockNumberAndTimestamp(overrides?: CallOverrides): Promise<{
    blockNumber: BigNumber;
    blockTimestamp: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "getL2BlockNumberAndTimestamp()"(overrides?: CallOverrides): Promise<{
    blockNumber: BigNumber;
    blockTimestamp: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  incrementTxNumberInBatch(overrides?: Overrides): Promise<ContractTransaction>;

  "incrementTxNumberInBatch()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  origin(overrides?: CallOverrides): Promise<string>;

  "origin()"(overrides?: CallOverrides): Promise<string>;

  publishTimestampDataToL1(overrides?: Overrides): Promise<ContractTransaction>;

  "publishTimestampDataToL1()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  resetTxNumberInBatch(overrides?: Overrides): Promise<ContractTransaction>;

  "resetTxNumberInBatch()"(overrides?: Overrides): Promise<ContractTransaction>;

  setGasPrice(
    _gasPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGasPrice(uint256)"(
    _gasPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setL2Block(
    _l2BlockNumber: BigNumberish,
    _l2BlockTimestamp: BigNumberish,
    _expectedPrevL2BlockHash: BytesLike,
    _isFirstInBatch: boolean,
    _maxVirtualBlocksToCreate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setL2Block(uint128,uint128,bytes32,bool,uint128)"(
    _l2BlockNumber: BigNumberish,
    _l2BlockTimestamp: BigNumberish,
    _expectedPrevL2BlockHash: BytesLike,
    _isFirstInBatch: boolean,
    _maxVirtualBlocksToCreate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setNewBatch(
    _prevBatchHash: BytesLike,
    _newTimestamp: BigNumberish,
    _expectedNewNumber: BigNumberish,
    _baseFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setNewBatch(bytes32,uint128,uint128,uint256)"(
    _prevBatchHash: BytesLike,
    _newTimestamp: BigNumberish,
    _expectedNewNumber: BigNumberish,
    _baseFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTxOrigin(
    _newOrigin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTxOrigin(address)"(
    _newOrigin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  txNumberInBlock(overrides?: CallOverrides): Promise<number>;

  "txNumberInBlock()"(overrides?: CallOverrides): Promise<number>;

  unsafeOverrideBatch(
    _newTimestamp: BigNumberish,
    _number: BigNumberish,
    _baseFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unsafeOverrideBatch(uint256,uint256,uint256)"(
    _newTimestamp: BigNumberish,
    _number: BigNumberish,
    _baseFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    appendTransactionToCurrentL2Block(
      _txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "appendTransactionToCurrentL2Block(bytes32)"(
      _txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    baseFee(overrides?: CallOverrides): Promise<BigNumber>;

    "baseFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    blockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "blockGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    blockHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "blockHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    "chainId()"(overrides?: CallOverrides): Promise<BigNumber>;

    coinbase(overrides?: CallOverrides): Promise<string>;

    "coinbase()"(overrides?: CallOverrides): Promise<string>;

    currentBlockInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "currentBlockInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    difficulty(overrides?: CallOverrides): Promise<BigNumber>;

    "difficulty()"(overrides?: CallOverrides): Promise<BigNumber>;

    gasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "gasPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBatchHash(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getBatchHash(uint256)"(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBatchNumberAndTimestamp(overrides?: CallOverrides): Promise<{
      batchNumber: BigNumber;
      batchTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getBatchNumberAndTimestamp()"(overrides?: CallOverrides): Promise<{
      batchNumber: BigNumber;
      batchTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getBlockHashEVM(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getBlockHashEVM(uint256)"(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "getBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockNumberAndTimestamp(overrides?: CallOverrides): Promise<{
      blockNumber: BigNumber;
      blockTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getBlockNumberAndTimestamp()"(overrides?: CallOverrides): Promise<{
      blockNumber: BigNumber;
      blockTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "getBlockTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    getL2BlockNumberAndTimestamp(overrides?: CallOverrides): Promise<{
      blockNumber: BigNumber;
      blockTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getL2BlockNumberAndTimestamp()"(overrides?: CallOverrides): Promise<{
      blockNumber: BigNumber;
      blockTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    incrementTxNumberInBatch(overrides?: CallOverrides): Promise<void>;

    "incrementTxNumberInBatch()"(overrides?: CallOverrides): Promise<void>;

    origin(overrides?: CallOverrides): Promise<string>;

    "origin()"(overrides?: CallOverrides): Promise<string>;

    publishTimestampDataToL1(overrides?: CallOverrides): Promise<void>;

    "publishTimestampDataToL1()"(overrides?: CallOverrides): Promise<void>;

    resetTxNumberInBatch(overrides?: CallOverrides): Promise<void>;

    "resetTxNumberInBatch()"(overrides?: CallOverrides): Promise<void>;

    setGasPrice(
      _gasPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGasPrice(uint256)"(
      _gasPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setL2Block(
      _l2BlockNumber: BigNumberish,
      _l2BlockTimestamp: BigNumberish,
      _expectedPrevL2BlockHash: BytesLike,
      _isFirstInBatch: boolean,
      _maxVirtualBlocksToCreate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setL2Block(uint128,uint128,bytes32,bool,uint128)"(
      _l2BlockNumber: BigNumberish,
      _l2BlockTimestamp: BigNumberish,
      _expectedPrevL2BlockHash: BytesLike,
      _isFirstInBatch: boolean,
      _maxVirtualBlocksToCreate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNewBatch(
      _prevBatchHash: BytesLike,
      _newTimestamp: BigNumberish,
      _expectedNewNumber: BigNumberish,
      _baseFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setNewBatch(bytes32,uint128,uint128,uint256)"(
      _prevBatchHash: BytesLike,
      _newTimestamp: BigNumberish,
      _expectedNewNumber: BigNumberish,
      _baseFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTxOrigin(_newOrigin: string, overrides?: CallOverrides): Promise<void>;

    "setTxOrigin(address)"(
      _newOrigin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    txNumberInBlock(overrides?: CallOverrides): Promise<number>;

    "txNumberInBlock()"(overrides?: CallOverrides): Promise<number>;

    unsafeOverrideBatch(
      _newTimestamp: BigNumberish,
      _number: BigNumberish,
      _baseFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unsafeOverrideBatch(uint256,uint256,uint256)"(
      _newTimestamp: BigNumberish,
      _number: BigNumberish,
      _baseFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    appendTransactionToCurrentL2Block(
      _txHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "appendTransactionToCurrentL2Block(bytes32)"(
      _txHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    baseFee(overrides?: CallOverrides): Promise<BigNumber>;

    "baseFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    blockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "blockGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    blockHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "blockHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    "chainId()"(overrides?: CallOverrides): Promise<BigNumber>;

    coinbase(overrides?: CallOverrides): Promise<BigNumber>;

    "coinbase()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentBlockInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "currentBlockInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    difficulty(overrides?: CallOverrides): Promise<BigNumber>;

    "difficulty()"(overrides?: CallOverrides): Promise<BigNumber>;

    gasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "gasPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBatchHash(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBatchHash(uint256)"(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBatchNumberAndTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "getBatchNumberAndTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockHashEVM(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBlockHashEVM(uint256)"(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "getBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockNumberAndTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "getBlockNumberAndTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "getBlockTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    getL2BlockNumberAndTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "getL2BlockNumberAndTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementTxNumberInBatch(overrides?: Overrides): Promise<BigNumber>;

    "incrementTxNumberInBatch()"(overrides?: Overrides): Promise<BigNumber>;

    origin(overrides?: CallOverrides): Promise<BigNumber>;

    "origin()"(overrides?: CallOverrides): Promise<BigNumber>;

    publishTimestampDataToL1(overrides?: Overrides): Promise<BigNumber>;

    "publishTimestampDataToL1()"(overrides?: Overrides): Promise<BigNumber>;

    resetTxNumberInBatch(overrides?: Overrides): Promise<BigNumber>;

    "resetTxNumberInBatch()"(overrides?: Overrides): Promise<BigNumber>;

    setGasPrice(
      _gasPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setGasPrice(uint256)"(
      _gasPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setL2Block(
      _l2BlockNumber: BigNumberish,
      _l2BlockTimestamp: BigNumberish,
      _expectedPrevL2BlockHash: BytesLike,
      _isFirstInBatch: boolean,
      _maxVirtualBlocksToCreate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setL2Block(uint128,uint128,bytes32,bool,uint128)"(
      _l2BlockNumber: BigNumberish,
      _l2BlockTimestamp: BigNumberish,
      _expectedPrevL2BlockHash: BytesLike,
      _isFirstInBatch: boolean,
      _maxVirtualBlocksToCreate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setNewBatch(
      _prevBatchHash: BytesLike,
      _newTimestamp: BigNumberish,
      _expectedNewNumber: BigNumberish,
      _baseFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setNewBatch(bytes32,uint128,uint128,uint256)"(
      _prevBatchHash: BytesLike,
      _newTimestamp: BigNumberish,
      _expectedNewNumber: BigNumberish,
      _baseFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTxOrigin(_newOrigin: string, overrides?: Overrides): Promise<BigNumber>;

    "setTxOrigin(address)"(
      _newOrigin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    txNumberInBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "txNumberInBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    unsafeOverrideBatch(
      _newTimestamp: BigNumberish,
      _number: BigNumberish,
      _baseFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unsafeOverrideBatch(uint256,uint256,uint256)"(
      _newTimestamp: BigNumberish,
      _number: BigNumberish,
      _baseFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    appendTransactionToCurrentL2Block(
      _txHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "appendTransactionToCurrentL2Block(bytes32)"(
      _txHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    baseFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blockGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "blockGasLimit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blockHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "blockHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "chainId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coinbase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "coinbase()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentBlockInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentBlockInfo()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    difficulty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "difficulty()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gasPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBatchHash(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBatchHash(uint256)"(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBatchNumberAndTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBatchNumberAndTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockHashEVM(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBlockHashEVM(uint256)"(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBlockNumber()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockNumberAndTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBlockNumberAndTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBlockTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getL2BlockNumberAndTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getL2BlockNumberAndTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incrementTxNumberInBatch(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "incrementTxNumberInBatch()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    origin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "origin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publishTimestampDataToL1(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "publishTimestampDataToL1()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    resetTxNumberInBatch(overrides?: Overrides): Promise<PopulatedTransaction>;

    "resetTxNumberInBatch()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGasPrice(
      _gasPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGasPrice(uint256)"(
      _gasPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setL2Block(
      _l2BlockNumber: BigNumberish,
      _l2BlockTimestamp: BigNumberish,
      _expectedPrevL2BlockHash: BytesLike,
      _isFirstInBatch: boolean,
      _maxVirtualBlocksToCreate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setL2Block(uint128,uint128,bytes32,bool,uint128)"(
      _l2BlockNumber: BigNumberish,
      _l2BlockTimestamp: BigNumberish,
      _expectedPrevL2BlockHash: BytesLike,
      _isFirstInBatch: boolean,
      _maxVirtualBlocksToCreate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setNewBatch(
      _prevBatchHash: BytesLike,
      _newTimestamp: BigNumberish,
      _expectedNewNumber: BigNumberish,
      _baseFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setNewBatch(bytes32,uint128,uint128,uint256)"(
      _prevBatchHash: BytesLike,
      _newTimestamp: BigNumberish,
      _expectedNewNumber: BigNumberish,
      _baseFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTxOrigin(
      _newOrigin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTxOrigin(address)"(
      _newOrigin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    txNumberInBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "txNumberInBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unsafeOverrideBatch(
      _newTimestamp: BigNumberish,
      _number: BigNumberish,
      _baseFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unsafeOverrideBatch(uint256,uint256,uint256)"(
      _newTimestamp: BigNumberish,
      _number: BigNumberish,
      _baseFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
