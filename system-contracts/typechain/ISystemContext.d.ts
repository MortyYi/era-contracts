/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ISystemContextInterface extends ethers.utils.Interface {
  functions: {
    "baseFee()": FunctionFragment;
    "blockGasLimit()": FunctionFragment;
    "chainId()": FunctionFragment;
    "coinbase()": FunctionFragment;
    "difficulty()": FunctionFragment;
    "gasPrice()": FunctionFragment;
    "getBatchHash(uint256)": FunctionFragment;
    "getBatchNumberAndTimestamp()": FunctionFragment;
    "getBlockHashEVM(uint256)": FunctionFragment;
    "getBlockNumber()": FunctionFragment;
    "getBlockTimestamp()": FunctionFragment;
    "getL2BlockNumberAndTimestamp()": FunctionFragment;
    "origin()": FunctionFragment;
    "txNumberInBlock()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "baseFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "blockGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(functionFragment: "coinbase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "difficulty",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gasPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBatchHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchNumberAndTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockHashEVM",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2BlockNumberAndTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "origin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "txNumberInBlock",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "baseFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blockGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "coinbase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "difficulty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gasPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBatchHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchNumberAndTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockHashEVM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2BlockNumberAndTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "origin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "txNumberInBlock",
    data: BytesLike
  ): Result;

  events: {};
}

export class ISystemContext extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ISystemContextInterface;

  functions: {
    baseFee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "baseFee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    blockGasLimit(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "blockGasLimit()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    chainId(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "chainId()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    coinbase(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "coinbase()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    difficulty(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "difficulty()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    gasPrice(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "gasPrice()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getBatchHash(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      hash: string;
      0: string;
    }>;

    "getBatchHash(uint256)"(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      hash: string;
      0: string;
    }>;

    getBatchNumberAndTimestamp(overrides?: CallOverrides): Promise<{
      blockNumber: BigNumber;
      blockTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getBatchNumberAndTimestamp()"(overrides?: CallOverrides): Promise<{
      blockNumber: BigNumber;
      blockTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getBlockHashEVM(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getBlockHashEVM(uint256)"(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getBlockNumber(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getBlockNumber()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getBlockTimestamp()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getL2BlockNumberAndTimestamp(overrides?: CallOverrides): Promise<{
      blockNumber: BigNumber;
      blockTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getL2BlockNumberAndTimestamp()"(overrides?: CallOverrides): Promise<{
      blockNumber: BigNumber;
      blockTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    origin(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "origin()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    txNumberInBlock(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "txNumberInBlock()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;
  };

  baseFee(overrides?: CallOverrides): Promise<BigNumber>;

  "baseFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  blockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "blockGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  chainId(overrides?: CallOverrides): Promise<BigNumber>;

  "chainId()"(overrides?: CallOverrides): Promise<BigNumber>;

  coinbase(overrides?: CallOverrides): Promise<string>;

  "coinbase()"(overrides?: CallOverrides): Promise<string>;

  difficulty(overrides?: CallOverrides): Promise<BigNumber>;

  "difficulty()"(overrides?: CallOverrides): Promise<BigNumber>;

  gasPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "gasPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  getBatchHash(
    _batchNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getBatchHash(uint256)"(
    _batchNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getBatchNumberAndTimestamp(overrides?: CallOverrides): Promise<{
    blockNumber: BigNumber;
    blockTimestamp: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "getBatchNumberAndTimestamp()"(overrides?: CallOverrides): Promise<{
    blockNumber: BigNumber;
    blockTimestamp: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  getBlockHashEVM(
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getBlockHashEVM(uint256)"(
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  "getBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

  getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "getBlockTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  getL2BlockNumberAndTimestamp(overrides?: CallOverrides): Promise<{
    blockNumber: BigNumber;
    blockTimestamp: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "getL2BlockNumberAndTimestamp()"(overrides?: CallOverrides): Promise<{
    blockNumber: BigNumber;
    blockTimestamp: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  origin(overrides?: CallOverrides): Promise<string>;

  "origin()"(overrides?: CallOverrides): Promise<string>;

  txNumberInBlock(overrides?: CallOverrides): Promise<number>;

  "txNumberInBlock()"(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    baseFee(overrides?: CallOverrides): Promise<BigNumber>;

    "baseFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    blockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "blockGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    "chainId()"(overrides?: CallOverrides): Promise<BigNumber>;

    coinbase(overrides?: CallOverrides): Promise<string>;

    "coinbase()"(overrides?: CallOverrides): Promise<string>;

    difficulty(overrides?: CallOverrides): Promise<BigNumber>;

    "difficulty()"(overrides?: CallOverrides): Promise<BigNumber>;

    gasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "gasPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBatchHash(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getBatchHash(uint256)"(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBatchNumberAndTimestamp(overrides?: CallOverrides): Promise<{
      blockNumber: BigNumber;
      blockTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getBatchNumberAndTimestamp()"(overrides?: CallOverrides): Promise<{
      blockNumber: BigNumber;
      blockTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getBlockHashEVM(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getBlockHashEVM(uint256)"(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "getBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "getBlockTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    getL2BlockNumberAndTimestamp(overrides?: CallOverrides): Promise<{
      blockNumber: BigNumber;
      blockTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getL2BlockNumberAndTimestamp()"(overrides?: CallOverrides): Promise<{
      blockNumber: BigNumber;
      blockTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    origin(overrides?: CallOverrides): Promise<string>;

    "origin()"(overrides?: CallOverrides): Promise<string>;

    txNumberInBlock(overrides?: CallOverrides): Promise<number>;

    "txNumberInBlock()"(overrides?: CallOverrides): Promise<number>;
  };

  filters: {};

  estimateGas: {
    baseFee(overrides?: CallOverrides): Promise<BigNumber>;

    "baseFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    blockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "blockGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    "chainId()"(overrides?: CallOverrides): Promise<BigNumber>;

    coinbase(overrides?: CallOverrides): Promise<BigNumber>;

    "coinbase()"(overrides?: CallOverrides): Promise<BigNumber>;

    difficulty(overrides?: CallOverrides): Promise<BigNumber>;

    "difficulty()"(overrides?: CallOverrides): Promise<BigNumber>;

    gasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "gasPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBatchHash(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBatchHash(uint256)"(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBatchNumberAndTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "getBatchNumberAndTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockHashEVM(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBlockHashEVM(uint256)"(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "getBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "getBlockTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    getL2BlockNumberAndTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "getL2BlockNumberAndTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    origin(overrides?: CallOverrides): Promise<BigNumber>;

    "origin()"(overrides?: CallOverrides): Promise<BigNumber>;

    txNumberInBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "txNumberInBlock()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    baseFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blockGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "blockGasLimit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "chainId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coinbase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "coinbase()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    difficulty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "difficulty()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gasPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBatchHash(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBatchHash(uint256)"(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBatchNumberAndTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBatchNumberAndTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockHashEVM(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBlockHashEVM(uint256)"(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBlockNumber()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBlockTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getL2BlockNumberAndTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getL2BlockNumberAndTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    origin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "origin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    txNumberInBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "txNumberInBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
