/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ISystemContextDeprecatedInterface extends ethers.utils.Interface {
  functions: {
    "blockHash(uint256)": FunctionFragment;
    "currentBlockInfo()": FunctionFragment;
    "getBlockNumberAndTimestamp()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "blockHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentBlockInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumberAndTimestamp",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "blockHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentBlockInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumberAndTimestamp",
    data: BytesLike
  ): Result;

  events: {};
}

export class ISystemContextDeprecated extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ISystemContextDeprecatedInterface;

  functions: {
    blockHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      hash: string;
      0: string;
    }>;

    "blockHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      hash: string;
      0: string;
    }>;

    currentBlockInfo(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "currentBlockInfo()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getBlockNumberAndTimestamp(overrides?: CallOverrides): Promise<{
      blockNumber: BigNumber;
      blockTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getBlockNumberAndTimestamp()"(overrides?: CallOverrides): Promise<{
      blockNumber: BigNumber;
      blockTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;
  };

  blockHash(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "blockHash(uint256)"(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  currentBlockInfo(overrides?: CallOverrides): Promise<BigNumber>;

  "currentBlockInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

  getBlockNumberAndTimestamp(overrides?: CallOverrides): Promise<{
    blockNumber: BigNumber;
    blockTimestamp: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "getBlockNumberAndTimestamp()"(overrides?: CallOverrides): Promise<{
    blockNumber: BigNumber;
    blockTimestamp: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  callStatic: {
    blockHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "blockHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    currentBlockInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "currentBlockInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockNumberAndTimestamp(overrides?: CallOverrides): Promise<{
      blockNumber: BigNumber;
      blockTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getBlockNumberAndTimestamp()"(overrides?: CallOverrides): Promise<{
      blockNumber: BigNumber;
      blockTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;
  };

  filters: {};

  estimateGas: {
    blockHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "blockHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentBlockInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "currentBlockInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockNumberAndTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "getBlockNumberAndTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    blockHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "blockHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentBlockInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentBlockInfo()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockNumberAndTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBlockNumberAndTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
