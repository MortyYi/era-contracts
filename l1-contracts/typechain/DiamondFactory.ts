/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { Diamond } from "./Diamond";

export class DiamondFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<Diamond> {
    return super.deploy(overrides || {}) as Promise<Diamond>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Diamond {
    return super.attach(address) as Diamond;
  }
  connect(signer: Signer): DiamondFactory {
    return super.connect(signer) as DiamondFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Diamond {
    return new Contract(address, _abi, signerOrProvider) as Diamond;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facet",
            type: "address",
          },
          {
            internalType: "enum Diamond.Action",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "isFreezable",
            type: "bool",
          },
          {
            internalType: "bytes4[]",
            name: "selectors",
            type: "bytes4[]",
          },
        ],
        indexed: false,
        internalType: "struct Diamond.FacetCut[]",
        name: "facetCuts",
        type: "tuple[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "initAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "initCalldata",
        type: "bytes",
      },
    ],
    name: "DiamondCut",
    type: "event",
  },
];

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122046b34567e326262903311a0713e3285bb317ef5979018158e4e399ecdaf4b9c564736f6c63430008140033";
