/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BytesLike } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import {
  Contract,
  ContractFactory,
  PayableOverrides,
} from "@ethersproject/contracts";

import type { ConstructorForwarder } from "./ConstructorForwarder";

export class ConstructorForwarderFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    to: string,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ConstructorForwarder> {
    return super.deploy(
      to,
      data,
      overrides || {}
    ) as Promise<ConstructorForwarder>;
  }
  getDeployTransaction(
    to: string,
    data: BytesLike,
    overrides?: PayableOverrides
  ): TransactionRequest {
    return super.getDeployTransaction(to, data, overrides || {});
  }
  attach(address: string): ConstructorForwarder {
    return super.attach(address) as ConstructorForwarder;
  }
  connect(signer: Signer): ConstructorForwarderFactory {
    return super.connect(signer) as ConstructorForwarderFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConstructorForwarder {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ConstructorForwarder;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6080604052604051610206380380610206833981016040819052610022916100cf565b6000826001600160a01b0316348360405161003d919061019d565b60006040518083038185875af1925050503d806000811461007a576040519150601f19603f3d011682016040523d82523d6000602084013e61007f565b606091505b505090508061008d57600080fd5b5050506101b9565b634e487b7160e01b600052604160045260246000fd5b60005b838110156100c65781810151838201526020016100ae565b50506000910152565b600080604083850312156100e257600080fd5b82516001600160a01b03811681146100f957600080fd5b60208401519092506001600160401b038082111561011657600080fd5b818501915085601f83011261012a57600080fd5b81518181111561013c5761013c610095565b604051601f8201601f19908116603f0116810190838211818310171561016457610164610095565b8160405282815288602084870101111561017d57600080fd5b61018e8360208301602088016100ab565b80955050505050509250929050565b600082516101af8184602087016100ab565b9190910192915050565b603f806101c76000396000f3fe6080604052600080fdfea2646970667358221220fa4298f1be49642603d53b131445d3d297d8567b3d195787bd2bfe4fbf9d73da64736f6c63430008140033";
