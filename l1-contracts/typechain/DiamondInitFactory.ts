/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { DiamondInit } from "./DiamondInit";

export class DiamondInitFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<DiamondInit> {
    return super.deploy(overrides || {}) as Promise<DiamondInit>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DiamondInit {
    return super.attach(address) as DiamondInit;
  }
  connect(signer: Signer): DiamondInitFactory {
    return super.connect(signer) as DiamondInitFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DiamondInit {
    return new Contract(address, _abi, signerOrProvider) as DiamondInit;
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IVerifier",
            name: "verifier",
            type: "address",
          },
          {
            internalType: "address",
            name: "governor",
            type: "address",
          },
          {
            internalType: "address",
            name: "admin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "genesisBatchHash",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "genesisIndexRepeatedStorageChanges",
            type: "uint64",
          },
          {
            internalType: "bytes32",
            name: "genesisBatchCommitment",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "recursionNodeLevelVkHash",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "recursionLeafLevelVkHash",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "recursionCircuitsSetVksHash",
                type: "bytes32",
              },
            ],
            internalType: "struct VerifierParams",
            name: "verifierParams",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "zkPorterIsAvailable",
            type: "bool",
          },
          {
            internalType: "bytes32",
            name: "l2BootloaderBytecodeHash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "l2DefaultAccountBytecodeHash",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "priorityTxMaxGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "initialProtocolVersion",
            type: "uint256",
          },
        ],
        internalType: "struct DiamondInit.InitializeData",
        name: "_initalizeData",
        type: "tuple",
      },
    ],
    name: "initialize",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001961001e565b610080565b7f8e94fed44239eb2314ab7a406345e6c5a8f0ccedf3b600de3d004e672c33abf480546001909155801561007d5760405162461bcd60e51b815260206004820152600260248201526118a160f11b604482015260640160405180910390fd5b50565b6106ee8061008f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063cce8576e14610030575b600080fd5b61004361003e36600461060d565b610055565b60405190815260200160405180910390f35b600061005f61057a565b600061006e6020840184610648565b73ffffffffffffffffffffffffffffffffffffffff16036100f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f767400000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60006101026040840160208501610648565b73ffffffffffffffffffffffffffffffffffffffff160361017f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f767900000000000000000000000000000000000000000000000000000000000060448201526064016100e7565b60006101916060840160408501610648565b73ffffffffffffffffffffffffffffffffffffffff160361020e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f686300000000000000000000000000000000000000000000000000000000000060448201526064016100e7565b6304c4b4008261018001351115610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f767500000000000000000000000000000000000000000000000000000000000060448201526064016100e7565b61028e6020830183610648565b600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790556102e36040830160208401610648565b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790556103386060830160408401610648565b602480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905560408051610100810182526000808252606085013560208301529181016103aa60a086016080870161066c565b67ffffffffffffffff168152602001600081526020017fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b81526020016000801b8152602001600081526020018460a00135815250905080604051602001610476919060006101008201905067ffffffffffffffff8084511683526020840151602084015280604085015116604084015250606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015292915050565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209182012060008052600e9091527fe710864318d4a32f37d6ce54cb3fadbef648dd12d8dbdf53973564d56b7f881c5560c083013560145560e083013560155561010083013560165561050261014084016101208501610696565b601980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790555050610140810135601755610160810135601855610180810135601a556101a001356021557f33774e659306e47509050e97cb651e731180a42d458212294d30751925c551a290565b7f8e94fed44239eb2314ab7a406345e6c5a8f0ccedf3b600de3d004e672c33abf480546001909155801561060a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f314200000000000000000000000000000000000000000000000000000000000060448201526064016100e7565b50565b60006101c0828403121561062057600080fd5b50919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461060a57600080fd5b60006020828403121561065a57600080fd5b813561066581610626565b9392505050565b60006020828403121561067e57600080fd5b813567ffffffffffffffff8116811461066557600080fd5b6000602082840312156106a857600080fd5b8135801515811461066557600080fdfea26469706673582212200c9fca69a05beea09f16131f9a881a6aee2f101bee20279313b233ed91bb376a64736f6c63430008140033";
