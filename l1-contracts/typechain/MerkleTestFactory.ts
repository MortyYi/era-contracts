/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MerkleTest } from "./MerkleTest";

export class MerkleTestFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<MerkleTest> {
    return super.deploy(overrides || {}) as Promise<MerkleTest>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MerkleTest {
    return super.attach(address) as MerkleTest;
  }
  connect(signer: Signer): MerkleTestFactory {
    return super.connect(signer) as MerkleTestFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleTest {
    return new Contract(address, _abi, signerOrProvider) as MerkleTest;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_path",
        type: "bytes32[]",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_itemHash",
        type: "bytes32",
      },
    ],
    name: "calculateRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061038b806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80637a59206514610030575b600080fd5b61004361003e36600461024d565b610055565b60405190815260200160405180910390f35b60006100638585858561006c565b95945050505050565b600083806100db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f786300000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6101008110610146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f627400000000000000000000000000000000000000000000000000000000000060448201526064016100d2565b6001811b84106101b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f707800000000000000000000000000000000000000000000000000000000000060448201526064016100d2565b8260005b82811015610242576101c96002876102fe565b156101ff576101fa8888838181106101e3576101e3610312565b905060200201358360009182526020526040902090565b61022b565b61022b8289898481811061021557610215610312565b9050602002013560009182526020526040902090565b9150610238600287610341565b95506001016101b6565b509695505050505050565b6000806000806060858703121561026357600080fd5b843567ffffffffffffffff8082111561027b57600080fd5b818701915087601f83011261028f57600080fd5b81358181111561029e57600080fd5b8860208260051b85010111156102b357600080fd5b6020928301999098509187013596604001359550909350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261030d5761030d6102cf565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082610350576103506102cf565b50049056fea26469706673582212200a81d6a8df6b592bbc14235d73605c9a081cd2ef492e91fec9e6e6080608fe9464736f6c63430008140033";
