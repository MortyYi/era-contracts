/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { ReturnSomething } from "./ReturnSomething";

export class ReturnSomethingFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<ReturnSomething> {
    return super.deploy(overrides || {}) as Promise<ReturnSomething>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ReturnSomething {
    return super.attach(address) as ReturnSomething;
  }
  connect(signer: Signer): ReturnSomethingFactory {
    return super.connect(signer) as ReturnSomethingFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReturnSomething {
    return new Contract(address, _abi, signerOrProvider) as ReturnSomething;
  }
}

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50604080601d6000396000f3fe608060405260206000f3fea2646970667358221220b731d9affb2f292ba1153e272cb6f80cee480e0d68ff83ee4cb3781a6c68367e64736f6c63430008140033";
