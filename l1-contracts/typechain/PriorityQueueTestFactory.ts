/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { PriorityQueueTest } from "./PriorityQueueTest";

export class PriorityQueueTestFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<PriorityQueueTest> {
    return super.deploy(overrides || {}) as Promise<PriorityQueueTest>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PriorityQueueTest {
    return super.attach(address) as PriorityQueueTest;
  }
  connect(signer: Signer): PriorityQueueTestFactory {
    return super.connect(signer) as PriorityQueueTestFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PriorityQueueTest {
    return new Contract(address, _abi, signerOrProvider) as PriorityQueueTest;
  }
}

const _abi = [
  {
    inputs: [],
    name: "front",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "canonicalTxHash",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expirationTimestamp",
            type: "uint64",
          },
          {
            internalType: "uint192",
            name: "layer2Tip",
            type: "uint192",
          },
        ],
        internalType: "struct PriorityOperation",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFirstUnprocessedPriorityTx",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSize",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalPriorityTxs",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isEmpty",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "popFront",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "canonicalTxHash",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expirationTimestamp",
            type: "uint64",
          },
          {
            internalType: "uint192",
            name: "layer2Tip",
            type: "uint192",
          },
        ],
        internalType: "struct PriorityOperation",
        name: "operation",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "canonicalTxHash",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expirationTimestamp",
            type: "uint64",
          },
          {
            internalType: "uint192",
            name: "layer2Tip",
            type: "uint192",
          },
        ],
        internalType: "struct PriorityOperation",
        name: "_operation",
        type: "tuple",
      },
    ],
    name: "pushBack",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061057f806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806384d9fedd1161005b57806384d9fedd146100c3578063a1954fc514610111578063ba75bbd814610119578063de8fa4311461012157600080fd5b8063681fe70c1461008257806375fe6a991461009c57806379823c9a146100b1575b600080fd5b600254600154604051911481526020015b60405180910390f35b6100af6100aa36600461043d565b61012e565b005b6002545b604051908152602001610093565b6100cb61013c565b604080518251815260208084015167ffffffffffffffff16908201529181015177ffffffffffffffffffffffffffffffffffffffffffffffff1690820152606001610093565b6001546100b5565b6100cb610163565b6100b561018a565b905090565b610139600082610196565b50565b6040805160608101825260008082526020820181905291810191909152610129600061020a565b6040805160608101825260008082526020820181905291810191909152610129600061032b565b60006101296000610421565b6001808301546000818152602085815260409182902085518155908501519185015177ffffffffffffffffffffffffffffffffffffffffffffffff16680100000000000000000267ffffffffffffffff9092169190911790830155906101fd908290610523565b8360010181905550505050565b6040805160608101825260008082526020820181905291810191909152600282015460018301540361029d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f730000000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b5060028101546000818152602083815260408083208151606081018352815481526001808301805467ffffffffffffffff81168488015268010000000000000000900477ffffffffffffffffffffffffffffffffffffffffffffffff1694830194909452868652938790529084905592905590919061031d908290610523565b836002018190555050919050565b604080516060810182526000808252602082018190529181019190915260028201546001830154036103b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f44000000000000000000000000000000000000000000000000000000000000006044820152606401610294565b5060028101546000908152602091825260409081902081516060810183528154815260019091015467ffffffffffffffff8116938201939093526801000000000000000090920477ffffffffffffffffffffffffffffffffffffffffffffffff169082015290565b6000816002015482600101546104379190610536565b92915050565b60006060828403121561044f57600080fd5b6040516060810167ffffffffffffffff828210818311171561049a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b81604052843583526020850135915080821682146104b757600080fd5b506020820152604083013577ffffffffffffffffffffffffffffffffffffffffffffffff811681146104e857600080fd5b60408201529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610437576104376104f4565b81810381811115610437576104376104f456fea26469706673582212206a243bdc035caaa2d3f68b9eb6f91d1ed5835b1aca8ff7f570cb6f71be77286564736f6c63430008140033";
