/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { Forwarder } from "./Forwarder";

export class ForwarderFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<Forwarder> {
    return super.deploy(overrides || {}) as Promise<Forwarder>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Forwarder {
    return super.attach(address) as Forwarder;
  }
  connect(signer: Signer): ForwarderFactory {
    return super.connect(signer) as ForwarderFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Forwarder {
    return new Contract(address, _abi, signerOrProvider) as Forwarder;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "forward",
    outputs: [
      {
        internalType: "bytes",
        name: "returnValue",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610221806100206000396000f3fe60806040526004361061001e5760003560e01c80636fadcf7214610023575b600080fd5b6100366100313660046100d1565b61004c565b604051610043919061016f565b60405180910390f35b606060008473ffffffffffffffffffffffffffffffffffffffff163485856040516100789291906101db565b60006040518083038185875af1925050503d80600081146100b5576040519150601f19603f3d011682016040523d82523d6000602084013e6100ba565b606091505b5092509050806100c957600080fd5b509392505050565b6000806000604084860312156100e657600080fd5b833573ffffffffffffffffffffffffffffffffffffffff8116811461010a57600080fd5b9250602084013567ffffffffffffffff8082111561012757600080fd5b818601915086601f83011261013b57600080fd5b81358181111561014a57600080fd5b87602082850101111561015c57600080fd5b6020830194508093505050509250925092565b600060208083528351808285015260005b8181101561019c57858101830151858201604001528201610180565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b818382376000910190815291905056fea2646970667358221220a3da24068eeb8bacb59d206d8a9d606d0965373dc4574d59297f7f0b22b2f24c64736f6c63430008140033";
